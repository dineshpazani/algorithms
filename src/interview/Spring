
#Spring MCV workflow:

1. Dispatcher servlet
2. Handler mapper
3. controller
4. madel and view
5. View resolver
6. view


#Anotations:
@Service
@Repository
@Component

@Contorller
@Restcontroller
@Getmapping
@postmapping
@PutMapping
@DeleteMapping

@SpringbootApplication
@AutoConfig
@CompnentScan

@value - read value from properties file or set value

#Spring boot life cycle:
postconstruct
predestory


#Spring Cloud:
Eureka - serivce registory
Zuul - Gateway
Ribbin - load balancer
Hystrix - Circut breaker

#Spring no of way inject the bean:

Annotation    Package                Source
@Resource    javax.annotation    Java
@Inject        javax.inject        Java
@Qualifier    javax.inject        Java
@Autowired    org.springframework.bean.factory    Spring

#@Autowired:
Matches by Type
Restricts by Qualifiers
Matches by Name

#Spring scope:
Singleton
Prototype
request
Session
gobal session

#DI or IOC:
Constructor Injection
Setter Injection

#Spring Container type:
BeanFactory container
ApplicationContext container

AOP:
    
    Aspect: An aspect is a class that implements enterprise application concerns that cut across multiple classes, such as transaction management. 
        Aspects can be a normal class configured through Spring XML configuration or we can use Spring AspectJ integration to define a class as Aspect using @Aspect annotation.
    Join Point: A join point is a specific point in the application such as method execution, exception handling, changing object variable values, etc. 
        In Spring AOP a join point is always the execution of a method.
    Advice: Advices are actions taken for a particular join point. In terms of programming, they are methods that get executed when a certain join point with matching pointcut is reached in the application. 
        You can think of Advices as Struts2 interceptors or Servlet Filters.
    Pointcut: Pointcut is expressions that are matched with join points to determine whether advice needs to be executed or not. 
        Pointcut uses different kinds of expressions that are matched with the join points and Spring framework uses the AspectJ pointcut expression language.
    Target Object: They are the object on which advices are applied. Spring AOP is implemented using runtime proxies so this object is always a proxied object. 
        What is means is that a subclass is created at runtime where the target method is overridden and advice are included based on their configuration.
    AOP proxy: Spring AOP implementation uses JDK dynamic proxy to create the Proxy classes with target classes and advice invocations, these are called AOP proxy classes. 
        We can also use CGLIB proxy by adding it as the dependency in the Spring AOP project.
    Weaving: It is the process of linking aspects with other objects to create the advised proxy objects. This can be done at compile time, load time or at runtime. Spring AOP performs weaving at the runtime.

    Joinpoint: is a point of execution of the program, such as the execution of a method or the handling of an exception. In Spring AOP, a joinpoint always represents a method execution.
    Pointcut: is a predicate or expression that matches join points.
    Advice: is associated with a pointcut expression and runs at any join point matched by the pointcut.

    Before advice: Run before the method execution
    After returning advice: Run after the method returns a result
    After throwing advice: Run after the method throws an exception
    Around advice: Run around the method execution, combine all three advices above.


