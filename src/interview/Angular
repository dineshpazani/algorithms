
Angular life cycle hook :
ngOnChanges()
ngOnInit()
ngDoCheck()
  ngAfterContentInit()
  ngAfterContentChecked()
  ngAfterViewInit()
  ngAfterViewChecked()
ngOnDestroy()

#Life Cycle of Angular:
    Create
    Render
    Create and render children
    Check for bound data changes and re-render
    Destroy
	
# Double curly brackets:
double curly brackets like {{}} are used form data interpolation in Angular5

Type of decorators:
Class Decorators
Method
Property
Paramters

#Type of Injections:
@Inject() - is a manual mechanism for letting Angular know that a parameter must be injected
@Injectable() lets Angular know that a class can be used with the dependency injector. 

#Transpiling
Traceur compiler is used for converting TypeScript to JavaScript 

#Component vs Directives:
Components are proving proper view whereas Directives don’t have

#Driectives
Component
structural Directives - DOM related operations
Attribute Directives - CSS related operations

@forRoot - egar loading to visible to all component
@forChild - egar loading for child component

#Compunt communication:
Passing the reference of one component to another
Communication through parent component
Communication through Service
https://medium.com/@mirokoczka/3-ways-to-communicate-between-angular-components-a1e3f3304ecb


#JIT and AOT
JIT - Just in time compile is at development
AOT - Ahead of time is at prod 

#Promise vs Observanles:

Promise - return single value and unable to cancel
Observanles - return stream of values and able to cancel it.
Rxjs, ES2016, Support for Map and filters

#Event Emitters:
 Event Emitter is one the class using to emit custom events.
 @output() somethingchanged = new EventEmitter();

#Dynamic Component
ComponentFactoryResolver

#ViewEncapsulation: 
View Encapsulation in Angular defines how the styles defined in the template affects the other parts of the application.
  Emulated: 0
  Native: 1
  None: 2
  ShadowDom: 3
  https://www.tektutorialshub.com/angular/angular-view-encapsulation/

#ShadowDom vs virtual DOM:

ShadowDom - The shadow DOM is a way of encapsulating the implementation of web components.
Virtual DOM - The virtual DOM is an in-memory representation of the real DOM.

#Form
Reactiveform (Model driven form)
Template driven form


#Decorators:
Decorators are functions that adds metadata to class members and functions. It was proposed in ES2016 and implemented in Typescript.

Angular 6 features:
  RxJS 6.0 :  Observable<number> = of(1, 2).pipe(map(n => n * n));

  Tree Shaking: Unused code is not binded.
  Bazel Compiler: his compiler only rebuilds what is necessary to build. Since source code changes very often, 
  it does not make any sense to rebuild the entire application for every little change. 
  Ivy: New Rendering Engine
  Bye, Bye Template Element: ng-template

NgModule:
  NgModules configure the injector and the compiler and help organize related things together.


Constructor vs NgInit:
#Constructor
The constructor function comes with every class, constructors are not specific to Angular but are concepts derived from Object oriented designs. 
The constructor creates an instance of the component class.

#OnInit
The ngOnInit function is one of an Angular component’s life-cycle methods. 
Life cycle methods (or hooks) in Angular components allow you to run a piece of code at different stages of the life of a component. 
Unlike the constructor method, ngOnInit method comes from an Angular interface (OnInit) that the component needs to implement in order to use this method. 
The ngOnInit method is called shortly after the component is created.

Lazy-loading feature modules:
  By default, NgModules are eagerly loaded, which means that as soon as the app loads, so do all the NgModules, 
  whether or not they are immediately necessary. For large apps with lots of routes, consider lazy loading—a design 
  pattern that loads NgModules as needed. Lazy loading helps keep initial bundle sizes smaller, which in turn helps decrease load times.

Pure and Impure pipe:
impure-pipe works for every change in the component
pure-pipe works only when the component is loaded.