#Java Interview:

#Design patterns:

#Creational
Singletons
Protoype
Factory
Builder 

#Behavioral:
Iterator
strategy design pattern

#Strutural:


#Class Loader
System
Extenstion
Boostrap

#Oops concept:
Abstraction : Abstract
Inheritance -interface
polymorphism - method overloading and overriding 
Encapsulations - private, public, protected
Composition - IS-A relationship
Association - 
Aggregation - HS- A relationship
Exception - checked exception and unchecked exception  https://www.codejava.net/java-core/exception/java-checked-and-unchecked-exceptions


#can static block throw exception in java?
The static block must not throw checked exceptions but still allows unchecked/runtime-exceptions to be thrown.
But according to above reasons you would be unable to handle these either.

#what is difference between static and init block in java ?
The static block is only loaded when the class object is created by the
JVM for the 1st time whereas init {} block is loaded every time class object is created. Also first the static block is loaded then the init block.

#what is difference iterator access and index access?

# Is java pass by value or pass by reference?
Primitive/wrapper pass by value and object like map/list classes pass by reference

#static variable vs non static variables:
Static variable loaded when class is load but non static variable loaded only constructor is called.

difference between serializable and externalizable:
    Serialization helps in serializing complete object whereas with Externalization we can serialize either complete or partial object
Serialize is marker interface
externalization have two method: writeExternal and readExternal
Compiler generated serialVersionUID: is highly complex as it uses combination of class name and properties to generate this unique Id

#What is Casting in Java?
Object of one particular type and “turning it into” another Object type. This process is called casting a variable.

#difference between char array and string in java?
String is immutable so getting memory dumped

#Can an abstract class have a constructor?
Yes, it have own members to initiate

#Difference between Java Heap Space and Stack Memory
Heap memory is used by all the parts of the application whereas stack memory is used only by one thread of execution.
Whenever an object is created, it’s always stored in the Heap space and stack memory contains the reference to it.
Stack memory only contains local primitive variables and reference variables to objects in heap space.
Objects stored in the heap are globally accessible whereas stack memory can’t be accessed by other threads.
Memory management in stack is done in LIFO manner whereas it’s more complex in Heap memory because it’s used globally.
Heap memory is divided into Young-Generation, Old-Generation etc, more details at Java Garbage Collection.
Stack memory is short-lived whereas heap memory lives from the start till the end of application execution.
We can use -Xms and -Xmx JVM option to define the startup size and maximum size of heap memory. We can use -Xss to define the stack memory size.
When stack memory is full, Java runtime throws java.lang.StackOverFlowError whereas if heap memory is full, it throws java.lang.OutOfMemoryError: Java Heap Space error.
Stack memory size is very less when compared to Heap memory. Because of simplicity in memory allocation (LIFO), stack memory is very fast when compared to heap memory.

#Rule for overloading and overriding:
Overloading:
change method signature
#number of arguments, type of arguments and order of arguments 
public class DemoClass {
    // Overloaded method
    public Integer sum(Integer a, Integer b) {
        return a + b;
    }
 
    // Overloading method
    public Integer sum(Float a, Integer b) {  //Valid
        return null;
    }
}
#changing the return type of method does not amount to method overloading.
public class DemoClass {
    // Overloaded method
    public Integer sum(Integer a, Integer b) {
        return a + b;
    }
 
    // Overloading method
    public Float sum(Integer a, Integer b) {     //Not valid; Compile time error
        return null;
    }
}

 #no effect at all on method loading.
 public class DemoClass {
    // Overloaded method
    public Integer sum(Integer a, Integer b) throws NullPointerException{
        return a + b;
    }
 
    // Overloading method
    public Integer sum(Integer a, Integer b) throws Exception{  //Not valid; Compile time error
        return null;
    }
}

#Overriding:
argument list in overridden and overriding methods must be exactly same

#return type of overriding method can be child class of return type declared in overridden method.
public class SuperClass {
    //Overriden method
    public Number sum(Integer a, Integer b) {
        return a + b;
    }
}
 
class SubClass extends SuperClass {
    //Overriding method
    @Override
    public Integer sum(Integer a, Integer b) {      //Integer extends Number; so it's valid
        return a + b;
    }
}

#private, static and final methods can not be overridden 

Overriding method can not throw checked Exception higher in hierarchy
overriding method can not reduce the access scope of overridden method. 


#Spring pool:
String a = new String("abc"); 2 object will create. 1 in heap memory and another one in string reference pool
String a = "abc"; only one object will create in string reference pool
String b = new String("abc"); now 3 object only available in the JVM


#Garbage cpllection:
finalize is method in object. It will involve before an object eligible by gc; 

System.gc(); It system class to invoke externally. We can invoke external but no garantee to move to gc.

#Eligible for GC:

A a = new A();
a= null; eligible
a = b; eligible

What are the advantages of Java streams?:
No storage. A Stream is not a data structure, but only a view of a data source, which can be an array, a Java container or an I/O channel.
A Stream is functional in nature. Any modifications to a Stream will not change the data sources. For example, filtering a Stream does not delete filtered elements, 
but generates a new Stream that does not contain filtered elements.
Lazy execution. Operations on a Stream will not be executed immediately. They will be executed only when users really need results.
Consumable. The elements of a stream are only visited once during the life of a stream. Once traversed, a Stream is invalidated, just like a container iterator. 
You have to regenerate a new Stream if you want to traverse the Stream again.

Volatile:
    Volatile Keyword in Java. Volatile keyword is used to modify the value of a variable by different threads. It is also used to make classes thread safe. It means that multiple threads can use a method and instance of the classes at the same time without any problem.
transient:



A functional interface has only one abstract method but it can have multiple default methods.
@FunctionalInterface annotation is used to ensure an interface can’t have more than one abstract method. The use of this annotation is optional.
The java.util.function package contains many builtin functional interfaces in Java 8.




createing custom exception:
    Create a new class whose name should end with Exception like ClassNameException. This is a convention to differentiate an exception class from regular ones.
    Make the class extends one of the exceptions which are subtypes of the java.lang.Exception class. Generally, a custom exception class always extends directly from the Exception class.
    Create a constructor with a String parameter which is the detail message of the exception. In this constructor, simply call the super constructor and pass the message.


Difference between == and .equals() method in Java:
    Main difference between .equals() method and == operator is that one is method and other is operator.
We can use == operators for reference comparison (address comparison) and .equals() method for content comparison. In simple words, == checks if both objects point to the same memory location whereas .equals() evaluates to the comparison of values in the objects.
If a class does not override the equals method, then by default it uses equals(Object o) method of the closest parent class that has overridden this method. See this for detail


step for create immutable objects:    

    Declare the class as final so it can’t be extended.
    Make all fields private so that direct access is not allowed.
    Don’t provide setter methods for variables
    Make all mutable fields final so that it’s value can be assigned only once.
    Initialize all the fields via a constructor performing deep copy.
    Perform cloning of objects in the getter methods to return a copy rather than returning the actual object reference.

Java stream api:
    https://www.journaldev.com/2774/java-8-stream#stream-collections

    We can use Stream.generate() and Stream.iterate() methods to create Stream.

    Stream<String> stream1 = Stream.generate(() -> {return "abc";});
    Stream<String> stream2 = Stream.iterate("abc", (i) -> i);


Type of Garbage Collector to run:
Option  Description
-XX:+UseSerialGC    Serial Garbage Collector
-XX:+UseParallelGC  Parallel Garbage Collector
-XX:+UseConcMarkSweepGC     CMS Garbage Collector (Concurrent Mark Sweep (CMS) garbage collector)
-XX:ParallelCMSThreads=     CMS Collector – number of threads to use
-XX:+UseG1GC    G1 Gargbage Collector
GC Optimization Options
Option  Description
-Xms    Initial heap memory size
-Xmx    Maximum heap memory size
-Xmn    Size of Young Generation
-XX:PermSize    Initial Permanent Generation size
-XX:MaxPermSize     Maximum Permanent Generation size
Ex:
java -Xmx12m -Xms3m -Xmn1m -XX:PermSize=20m -XX:MaxPermSize=20m -XX:+UseSerialGC -jar java-application.jar


________________________________________________________________________________________________________________________________________________________________

Please go through the below reading materials and kindly prepare well before the further rounds of interview. 
 
> http://javahungry.blogspot.com/2013/08/hashing-how-hash-map-works-in-java-or.html
>
> http://javahungry.blogspot.com/2014/06/how-treemap-works-ten-treemap-java-interview-questions.html
>
> http://javahungry.blogspot.com/2015/02/how-concurrenthashmap-works-in-java-internal-implementation.html
>
> http://javahungry.blogspot.com/2015/10/how-treeset-works-internally-in-java-interview-questions.html
>
> http://javahungry.blogspot.com/p/threads.html
>
> http://javarevisited.blogspot.in/2011/04/synchronization-in-java-synchronized.html
>
> http://javarevisited.blogspot.in/2011/06/volatile-keyword-java-example-tutorial.html
>
> http://mrbool.com/working-with-java-executor-framework-in-multithreaded-application/27560
>
> http://stackoverflow.com/questions/10828863/what-the-use-of-custom-class-loader
>
> http://stackoverflow.com/questions/10901752/what-is-the-significance-of-load-factor-in-hashmap
>
> http://stackoverflow.com/questions/11011291/treeset-internally-uses-treemap-so-is-it-required-to-implement-hashcode-method
>
> http://stackoverflow.com/questions/137975/what-is-so-bad-about-singletons
>
> http://stackoverflow.com/questions/13855013/understanding-java-memory-management
>
> http://stackoverflow.com/questions/2087469/sort-a-file-with-huge-volume-of-data-given-memory-constraint
>
> http://stackoverflow.com/questions/27325997/how-does-countdownlatch-works-in-java
>
> http://stackoverflow.com/questions/56860/what-is-the-liskov-substitution-principle
>
> http://stackoverflow.com/questions/8161896/example-code-to-show-how-java-synchronized-block-works
> http://tutorials.jenkov.com/java-concurrency/synchronized.html
>
> http://tutorials.jenkov.com/java-util-concurrent/cyclicbarrier.html
>
> http://www.dynatrace.com/en/javabook/how-garbage-collection-works.html
>
> http://www.oracle.com/webfolder/technetwork/tutorials/obe/java/G1GettingStarted/index.html
>
> http://www.programcreek.com/2013/03/hashmap-vs-treemap-vs-hashtable-vs-linkedhashmap/
>
> https://docs.oracle.com/cd/E13150_01/jrockit_jvm/jrockit/geninfo/diagnos/garbage_collect.html
>
> https://en.m.wikipedia.org/wiki/Creational_pattern
>
> https://en.wikipedia.org/wiki/SOLID_(object-oriented_design)
>
> https://lostechies.com/derickbailey/2009/02/11/solid-development-principles-in-motivational-pictures/
>
> https://scotch.io/bar-talk/s-o-l-i-d-the-first-five-principles-of-object-oriented-design
Few Links on Database:-
DB/SQL.  
https://www.pluralsight.com/courses/introduction-to-sql 
http://www.programmerinterview.com/index.php/database-sql/sql-having-vs-group-by/
http://www.programmerinterview.com/index.php/database-sql/inner-vs-outer-joins/
https://www.essentialsql.com/what-is-a-query-plan/
http://www.dotnettricks.com/learn/sqlserver/understanding-case-expression-in-sql-server-with-example
 
https://12factor.net/
https://www.journaldev.com/2888/spring-tutorial-spring-core-tutorial
https://www.baeldung.com/spring-tutorial
 
·         Bindings
·         Polymorphism
·         Garbage Collection
.         Executors
·         Runtime Parameters
·         Read through Concurrent Collections
·         SQL Syntax
.         New Java Features
.         CHM
.         Deadlock resolution
.         Designing skills
.        Object immutability
.        Executor service
.        Hashmap concepts
.               ExecutorService
.               Concurrenthashmap
.               clustered and non clustered index
.               Finding number in infinite range
.               Range query
.               Immutable class
.               RDBMS
 
Java
----
How to implement Connection pool
How to implement Thread pool. 
Why do we need connection/thread pool
How to implement Blocking Queue
Explain architecture of your current project
Explain different layers in micro services, How to configure load balancing
Difference between Hash map and tree map
What is the implementation to use a class as a key in a tree map 
Streams - find minimum number from a integer list
Lambdas, functional interface
How do you Sort numbers(which are comma separated) from a file. Size of the file is 100 GB. Assume you can load only 10 GB of data on java memory.
 
Spring
-------
Ways of dependency injection
How to you create non-singleton objects
How do you inject a prototype class into a singleton class
When Class A depends on Class B and Class B depends on Class A then how will you implement it
 
Database
---------
A table has four columns id, name, manager id, department id. Write a sql to get number of employees by manager of a given department id.
A table has two columns id and name. write a sql to select id(s) that are having duplicate names.
 
1)OOPS(Object Oriented Programming):
 
    • Polymorphism
    • Overloading vs Overriding
    • Abstract class vs Interface
 
2)Data Structures:
 
    • List, Linkedlist, Array list, Sorted List
    • Map, Treemap etc.
 
3)Operating Systems/JVM:
 
    • Process vs Threads
    • Stack vs Heap
    • Garbage collection
 
4)Threads and Synchronization
 
    • Runnable and thread class
    • Synchronized block, methods-static and non-static
    • Object vs Class level block
    • Thread pools/ExecutorService
    • Concurrent Collections
 
5)Database
 
    • Model entities with one-to-many and many-to-many relationship
    • PK and FK
    • Indexes
    • Transactions
    • Stored Procs


